import JAVA_TYPE from './../../../config/JavaType';
import CS_TYPE from '../../../config/CSType';
import NODEJS_TYPE from '../../../config/NodeJSType';
import JS_TYPE from '../../../config/JavascriptType';
import PHP_TYPE from '../../../config/PHPType';
import XML_TYPE from "../../../config/XmlType";
import Utils from "../../../../utils/BasicUltils";

let ProjectView = {
    createView: function (dataTree) {
        this.initProjectView();

        // Generate HTML code (Folder Tree View)
        Utils.emptyContentDiv([".project-view"]);
        this.renderTree(dataTree);

        this.addEvent();
    },
    redrawProjectView(dataTree) {
        Utils.emptyContentDiv([".project-view"]);
        this.renderTree(dataTree);

        this.addEvent();
    },
    initProjectView() {
        // Named element as class project-view and css it
        document
            .querySelector(".content > div.view.left-view > div")
            .setAttribute("class", "view project-view");
    },
    addEvent() {
        // Remove all ul empty element generated by code
        $(".project-view li > ul").each(function () {
            if ($(this).text() === "") {
                $(this).remove();
            }
        });
        // Get all folder element and name it .folder
        let allFolders = $(".project-view li > ul");
        allFolders.each(function () {
            // add the folder class to the parent <li>
            let folderAndName = $(this).parent();
            folderAndName.addClass("folder");

            // backup this inner <ul>
            let backupOfThisFolder = $(this);
            // then delete it
            $(this).remove();
            // add an <a> tag to whats left ie. the folder name
            folderAndName.wrapInner("<a href='#' />");
            // then put the inner <ul> back
            folderAndName.append(backupOfThisFolder);

            // now add a slideToggle to the <a> we just added
            folderAndName.find("a").click(function (e) {
                $(this).siblings("ul").toggle();
                e.preventDefault();
            });
        });

        //Collapse all folders
        document.querySelectorAll(".folder > a").forEach((node) => {
            node.click();
        });
    },
    renderTree(dataTree) {
        // need to add data to onefield of root object to render html code by nested hierarchy json data
        let root = {
            root: [dataTree],
        };
        // console.log(document)
        let treeEl = document.querySelector(".project-view");
        treeEl.appendChild(ProjectView.to_ul(root.root));
    },
    to_ul(branches) {
        let ul = document.createElement("ul");

        for (let i = 0, n = branches.length; i < n; i++) {
            let branch = branches[i];

            if (branch !== null && branch !== undefined) {
				// // console.log(branch)
				let li = document.createElement("li");
				li.setAttribute("id", "node-" + branch.id);

				// Set class depending on node type to css icon
                //Java
				switch (branch.entityClass) {
					case JAVA_TYPE.JAVA_ROOT_NODE:
						li.setAttribute("class", "root-node");
						break;
					case JAVA_TYPE.JAVA_PACKAGE_NODE:
						li.setAttribute("class", "package-node");
						break;
					case JAVA_TYPE.JAVA_CLASS_NODE:
						li.setAttribute("class", "class-node");
						break;
					case JAVA_TYPE.JAVA_METHOD_NODE:
						li.setAttribute("class", "method-node");
						break;
					case JAVA_TYPE.JAVA_FIELD_NODE:
						li.setAttribute("class", "field-node");
						break;
					case JAVA_TYPE.JAVA_INTERFACE_NODE:
						li.setAttribute("class", "interface-node");
						break;
					case JAVA_TYPE.JAVA_ENUM_NODE:
						li.setAttribute("class", "enum-node");
						break;
					case JAVA_TYPE.JAVA_INITIALIZER_NODE:
						li.setAttribute("class", "initialize-node");
						break;
					case JAVA_TYPE.PROJECT_ROOT_NODE:
						li.setAttribute("class", "project-root-node");
						break;
					case JAVA_TYPE.RESOURCE_ROOT_NODE:
						li.setAttribute("class", "resource-root-node");
						break;
					case XML_TYPE.XML_FILE_NODE:
						li.setAttribute("class", "xml-file-node");
						break;
					case XML_TYPE.XML_TAG_NODE:
						li.setAttribute("class", "xml-tag-node");
						break;

                    //CSharp
					case CS_TYPE.CS_ROOT_NODE:
						li.setAttribute("class", "root-node");
						break;
					case CS_TYPE.CS_FOLDER_NODE:
						li.setAttribute("class", "cs-folder-node");
						break;
                    case CS_TYPE.CS_FILE_NODE:
						li.setAttribute("class", "cs-file-node");
						break;
					case CS_TYPE.CS_CLASS_NODE:
						li.setAttribute("class", "class-node");
						break;
                    case CS_TYPE.CS_STRUCT_NODE:
                        li.setAttribute("class", "struct-node");
                        break;
					case CS_TYPE.CS_METHOD_NODE:
						li.setAttribute("class", "method-node");
						break;
                    case CS_TYPE.CS_PROPERTY_NODE:
                        li.setAttribute("class", "property-node");
                        break;
					case CS_TYPE.CS_FIELD_NODE:
						li.setAttribute("class", "field-node");
						break;
					case CS_TYPE.CS_INTERFACE_NODE:
						li.setAttribute("class", "interface-node");
						break;
					case CS_TYPE.CS_ENUM_NODE:
						li.setAttribute("class", "enum-node");
						break;  
                    case CS_TYPE.CS_EVENT_FIELD_NODE:
                        li.setAttribute("class", "event-node");
                        break;
                    case CS_TYPE.CS_DELEGATE_NODE:
                        li.setAttribute("class", "delegate-node");
                        break;
                    case CS_TYPE.CS_LOCAL_FUNCTION_NODE:
                        li.setAttribute("class", "cs-local-function-node");
                        break;

                    //NodeJS
                    
                    case NODEJS_TYPE.NODEJS_ROOT_NODE:
                        li.setAttribute("class", "root-node");
						break;
                    case NODEJS_TYPE.NODEJS_FOLDER_NODE:
                        li.setAttribute("class", "package-node");
						break;
                    case NODEJS_TYPE.NODEJS_FILE_NODE:
                        li.setAttribute("class", "cs-file-node");
						break;
                    case NODEJS_TYPE.NODEJS_CLASS_NODE:
                        li.setAttribute("class", "class-node");
						break;
                    case NODEJS_TYPE.NODEJS_INTERFACE_NODE:
                        li.setAttribute("class", "interface-node");
						break;
                    case NODEJS_TYPE.NODEJS_ENUM_NODE:
                        li.setAttribute("class", "enum-node");
						break;
                    case NODEJS_TYPE.NODEJS_METHOD_NODE:
                        li.setAttribute("class", "method-node");
						break;
                    case NODEJS_TYPE.NODEJS_FUNCTION_NODE:
                        li.setAttribute("class", "cs-local-function-node");
                        break;
                    case NODEJS_TYPE.NODEJS_INHERITANCE_NODE:
                        li.setAttribute("class", "project-root-node");
						break;
                    case NODEJS_TYPE.NODEJS_CALL_NODE:
                        li.setAttribute("class", "project-root-node");
						break;
                    case NODEJS_TYPE.NODEJS_NEW_NODE:
                        li.setAttribute("class", "project-root-node");
						break;
                    case NODEJS_TYPE.NODEJS_OBJECT_NODE:
                        li.setAttribute("class", "project-root-node");
						break;
                    case NODEJS_TYPE.NODEJS_VARIABLE_NODE:
                        li.setAttribute("class", "project-root-node");
						break;
                    case NODEJS_TYPE.NODEJS_TYPE_NODE:
                        li.setAttribute("class", "project-root-node");
						break;
                    case NODEJS_TYPE.NODEJS_TYPE_REFERENCE_NODE:
                        li.setAttribute("class", "project-root-node");
						break;

                    //Javascript
                    case JS_TYPE.JS_ROOT_NODE:
                        li.setAttribute("class", "root-node");
						break;
                    case JS_TYPE.JS_FOLDER_NODE:
                        li.setAttribute("class", "package-node");
						break;
                    case JS_TYPE.JS_FILE_NODE:
                        li.setAttribute("class", "cs-file-node");
						break;
                    case JS_TYPE.JS_CLASS_NODE:
                        li.setAttribute("class", "class-node");
						break;
                    case JS_TYPE.JS_INTERFACE_NODE:
                        li.setAttribute("class", "interface-node");
						break;
                    case JS_TYPE.JS_ENUM_NODE:
                        li.setAttribute("class", "enum-node");
						break;
                    case JS_TYPE.JS_METHOD_NODE:
                        li.setAttribute("class", "method-node");
						break;
                    case JS_TYPE.JS_FUNCTION_NODE:
                        li.setAttribute("class", "cs-local-function-node");
                        break;
                    case JS_TYPE.JS_PROPERTY_NODE:
                        li.setAttribute("class", "property-node");
                        break;
                    case JS_TYPE.JS_CON:
                        li.setAttribute("class", "property-node");
                        break;  
                    case JS_TYPE.JS_CONSTRUCTOR_NODE:
                        li.setAttribute("class", "initialize-node");
                        break;
                    case JS_TYPE.JS_VARIABLE_NODE:
                        li.setAttribute("class", "fiels-node");
                        break;
                    //PHP
                    case PHP_TYPE.PHP_ROOT_NODE:
                        li.setAttribute("class", "root-node");
						break;
                    case PHP_TYPE.PHP_PACKAGE_NODE:
                        li.setAttribute("class", "package-node");
						break;
                    case PHP_TYPE.PHP_CLASS_NODE:
                        li.setAttribute("class", "class-node");
						break;
                    case PHP_TYPE.PHP_INTERFACE_NODE:
                        li.setAttribute("class", "interface-node");
						break;
                    case PHP_TYPE.PHP_METHOD_NODE:
                        li.setAttribute("class", "method-node");
						break;
                    case PHP_TYPE.PHP_ABSTRACT_NODE:
                        li.setAttribute("class", "initialize-node");
                        break;
                    case PHP_TYPE.PHP_FIELD_NODE:
                        li.setAttribute("class", "field-node");
                        break;
				}
                // // console.log(branch)

				let text = document.createElement("span");
				if (branch.simpleName === "{ROOT}") text.innerHTML = "SRC";
				else text.innerText = branch.simpleName;

                switch (branch.status) {
                    case "changed":
                        text.classList.add("badge");
                        text.classList.add("proj-view-node-changed");
                        break;
                    case "added":
                        text.classList.add("badge");
                        text.classList.add("proj-view-node-added");
                        break;
                    case "deleted":
                        text.classList.add("badge");
                        text.classList.add("proj-view-node-deleted");
                        break;
                }

				li.appendChild(text);

				if (branch.children) {
					li.appendChild(ProjectView.to_ul(branch.children));
				}

				ul.appendChild(li);
			}
        }

        return ul;
    }
};

export default ProjectView;
